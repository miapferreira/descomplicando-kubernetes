apiVersion: v1
kind: ConfigMap
metadata:
  name: locust-config
  labels:
    app: locust
data:
  locustfile.py: |
    from locust import HttpUser, task, between
    import random

    class WebsiteUser(HttpUser):
        wait_time = between(1, 3)  # Aguarda entre 1 e 3 segundos entre requests
        
        def on_start(self):
            """Executado quando um usuário virtual inicia"""
            print("Usuário virtual iniciado")
        
        @task(3)
        def visit_homepage(self):
            """Task com peso 3 - mais frequente"""
            self.client.get("/")
        
        @task(2)
        def visit_heavy_page(self):
            """Task com peso 2 - simula carga pesada"""
            # Simula uma página que consome mais recursos
            with self.client.get("/", catch_response=True) as response:
                if response.status_code == 200:
                    # Simula processamento pesado
                    import time
                    time.sleep(random.uniform(0.1, 0.5))
                    response.success()
                else:
                    response.failure(f"Status code: {response.status_code}")
        
        @task(1)
        def visit_error_page(self):
            """Task com peso 1 - simula requests que podem falhar"""
            # Tenta acessar uma página que não existe (404)
            with self.client.get("/nonexistent-page", catch_response=True) as response:
                if response.status_code == 404:
                    response.success()  # Esperamos 404
                else:
                    response.failure(f"Unexpected status code: {response.status_code}")
